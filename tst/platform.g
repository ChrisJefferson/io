# This tests, which things in the IO package exist on a given platform:
StdGlobalVarsIO := Set(
[ "IO", "IO_AddToPickled", "IO_AddToUnpickled", "IO_ClearPickleCache", 
  "IO_Close", "IO_CloseAllFDs", "IO_EOF", "IO_Environment", "IO_Error", 
  "IO_File", "IO_FinalizePickled", "IO_FinalizeUnpickled", "IO_Flush", 
  "IO_FlushNonBlocking", "IO_GenericObjectPickler", 
  "IO_GenericObjectUnpickler", "IO_GetFD", "IO_GetWBuf", "IO_HasData", 
  "IO_InstallSIGCHLDHandler", "IO_ListDir", "IO_MakeEnvList", 
  "IO_MakeIPAddressPort", "IO_MasterPointerNumber", "IO_Nothing", "IO_OK", 
  "IO_PICKLECACHE", "IO_Pickle", "IO_PickleByString", "IO_PipeThrough", 
  "IO_PipeThroughWithError", "IO_Popen", "IO_Popen2", "IO_Popen3", "IO_Read", 
  "IO_ReadAttribute", "IO_ReadBlock", "IO_ReadLine", "IO_ReadLines", 
  "IO_ReadSmallInt", "IO_ReadUntilEOF", "IO_ReadyForFlush", 
  "IO_ReadyForWrite", "IO_RestoreSIGCHLDHandler", "IO_Result", 
  "IO_ResultsFamily", "IO_Select", "IO_SendStringBackground", "IO_Unpickle", 
  "IO_UnpickleByEvalString", "IO_Unpicklers", "IO_WaitPid", "IO_WrapFD", 
  "IO_Write", "IO_WriteAttribute", "IO_WriteFlush", "IO_WriteLine", 
  "IO_WriteLines", "IO_WriteNonBlocking", "IO_WriteSmallInt", "IO_accept", 
  "IO_bind", "IO_chdir", "IO_chmod", "IO_chown", "IO_close", "IO_closedir", 
  "IO_connect", "IO_creat", "IO_dup", "IO_dup2", "IO_environ", "IO_execv", 
  "IO_execve", "IO_execvp", "IO_exit", "IO_fchmod", "IO_fchown", "IO_fcntl", 
  "IO_fork", "IO_fstat", "IO_gethostbyname", "IO_getsockopt", "IO_lchown", 
  "IO_link", "IO_listen", "IO_lseek", "IO_lstat", "IO_make_sockaddr_in", 
  "IO_mkdir", "IO_mkfifo", "IO_mknod", "IO_open", "IO_opendir", "IO_pipe", 
  "IO_read", "IO_readdir", "IO_readlink", "IO_recv", "IO_recvfrom", 
  "IO_rename", "IO_rewinddir", "IO_rmdir", "IO_seekdir", "IO_select", 
  "IO_send", "IO_sendto", "IO_setsockopt", "IO_socket", "IO_stat", 
  "IO_symlink", "IO_telldir", "IO_unlink", "IO_write" ] );
StdComponentsIO := Set(
[ "O_RDONLY", "O_WRONLY", "O_RDWR", "O_CREAT", "O_APPEND", "O_ASYNC", 
  "O_EXCL", "O_NOCTTY", "O_NONBLOCK", "O_NDELAY", "O_SYNC", "O_TRUNC", 
  "SEEK_SET", "SEEK_CUR", "SEEK_END", "S_IRWXU", "S_IRUSR", "S_IWUSR", 
  "S_IXUSR", "S_IRWXG", "S_IRGRP", "S_IWGRP", "S_IXGRP", "S_IRWXO", 
  "S_IROTH", "S_IWOTH", "S_IXOTH", "S_IFMT", "S_IFSOCK", "S_IFLNK", 
  "S_IFREG", "S_IFBLK", "S_IFDIR", "S_IFCHR", "S_IFIFO", "S_ISUID", 
  "S_ISGID", "S_ISVTX", "EACCES", "EEXIST", "EFAULT", "EISDIR", "ELOOP", 
  "EMFILE", "ENAMETOOLONG", "ENFILE", "ENODEV", "ENOENT", "ENOMEM", "ENOSPC", 
  "ENOTDIR", "ENXIO", "EOVERFLOW", "EPERM", "EROFS", "ETXTBSY", "EAGAIN", 
  "EBADF", "EINTR", "EINVAL", "EIO", "EFBIG", "EPIPE", "EBUSY", "ESPIPE", 
  "EMLINK", "EXDEV", "ENOTEMPTY", "EAFNOSUPPORT", "EPROTONOSUPPORT", 
  "ENOTSOCK", "EADDRINUSE", "EALREADY", "ECONNREFUSED", "EINPROGRESS", 
  "EISCONN", "ETIMEDOUT", "EOPNOTSUPP", "EPROTO", "ECONNABORTED", "ECHILD", 
  "EWOULDBLOCK", "HOST_NOT_FOUND", "NO_ADDRESS", "NO_DATA", "NO_RECOVERY", 
  "TRY_AGAIN", "AF_APPLETALK", "AF_ASH", "AF_ATMPVC", "AF_ATMSVC", "AF_AX25", 
  "AF_BLUETOOTH", "AF_BRIDGE", "AF_DECnet", "AF_ECONET", "AF_FILE", 
  "AF_INET", "AF_INET6", "AF_IPX", "AF_IRDA", "AF_KEY", "AF_LOCAL", "AF_MAX", 
  "AF_NETBEUI", "AF_NETLINK", "AF_NETROM", "AF_PACKET", "AF_PPPOX", 
  "AF_ROSE", "AF_ROUTE", "AF_SECURITY", "AF_SNA", "AF_UNIX", "AF_UNSPEC", 
  "AF_WANPIPE", "AF_X25", "PF_APPLETALK", "PF_ASH", "PF_ATMPVC", "PF_ATMSVC", 
  "PF_AX25", "PF_BLUETOOTH", "PF_BRIDGE", "PF_DECnet", "PF_ECONET", 
  "PF_FILE", "PF_INET", "PF_INET6", "PF_IPX", "PF_IRDA", "PF_KEY", 
  "PF_LOCAL", "PF_MAX", "PF_NETBEUI", "PF_NETLINK", "PF_NETROM", "PF_PACKET", 
  "PF_PPPOX", "PF_ROSE", "PF_ROUTE", "PF_SECURITY", "PF_SNA", "PF_UNIX", 
  "PF_WANPIPE", "PF_X25", "SOCK_DGRAM", "SOCK_PACKET", "SOCK_RAW", 
  "SOCK_RDM", "SOCK_SEQPACKET", "SOCK_STREAM", "SOL_SOCKET", "IP_OPTIONS", 
  "IP_PKTINFO", "IP_RECVTOS", "IP_RECVTTL", "IP_RECVOPTS", "IP_RETOPTS", 
  "IP_TOS", "IP_TTL", "IP_HDRINCL", "IP_RECVERR", "IP_MTU_DISCOVER", 
  "IP_ROUTER_ALERT", "IP_MULTICAST_TTL", "IP_MULTICAST_LOOP", 
  "IP_ADD_MEMBERSHIP", "IP_DROP_MEMBERSHIP", "IP_MULTICAST_IF", "SO_RCVBUF", 
  "SO_SNDBUF", "SO_SNDLOWAT", "SO_RCVLOWAT", "SO_SNDTIMEO", "SO_RCVTIMEO", 
  "SO_REUSEADDR", "SO_KEEPALIVE", "SO_OOBINLINE", "SO_BSDCOMPAT", 
  "SO_PASSCRED", "SO_PEERCRED", "SO_BINDTODEVICE", "SO_DEBUG", "SO_TYPE", 
  "SO_ACCEPTCONN", "SO_DONTROUTE", "SO_BROADCAST", "SO_LINGER", 
  "SO_PRIORITY", "SO_ERROR", "MSG_OOB", "MSG_PEEK", "MSG_WAITALL", 
  "MSG_TRUNC", "MSG_ERRQUEUE", "MSG_EOR", "MSG_CTRUNC", "MSG_DONTWAIT", 
  "PIPE_BUF", "F_DUPFD", "F_GETFD", "F_SETFD", "FD_CLOEXEC", "F_GETFL", 
  "F_SETFL", "F_GETOWN", "F_SETOWN", "F_RDLCK", "F_WRLCK", "F_UNLCK", 
  "__GNUC__", "__GNUC_MINOR__", "LineEndChars", "LineEndChar", 
  "DefaultBufSize", "MaxFDToClose" ] );

GlobalVarsIO := 
  Set(Filtered(NamesGVars(),x->Length(x)>=2 and x{[1..2]} = "IO"));
ComponentsIO := Set(NamesOfComponents(IO));

Print("Not available here:\n",Difference(StdGlobalVarsIO,GlobalVarsIO),"\n",
      Difference(StdComponentsIO,ComponentsIO),"\n\n");
Print("More available here:\n",Difference(GlobalVarsIO,StdGlobalVarsIO),"\n",
      Difference(ComponentsIO,StdComponentsIO),"\n\n");


